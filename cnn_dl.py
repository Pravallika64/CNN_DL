# -*- coding: utf-8 -*-
"""CNN DL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10gsVIxEV-EhdbPZzvKBaZtKva-H1bGPy
"""

from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
import cv2

(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()

# Normalize pixel values to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',
               'dog', 'frog', 'horse', 'ship', 'truck']

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i])
    # The CIFAR labels happen to be arrays,
    # which is why you need the extra index
    plt.xlabel(class_names[train_labels[i][0]])
plt.show()

model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))

model.summary()

model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10))

model.summary()

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

history = model.fit(train_images, train_labels, epochs=10,
                    validation_data=(test_images, test_labels))

# Choose a random image from the test set
import numpy as np
image_index = np.random.randint(0,100)
test_image = test_images[image_index]
true_label = test_labels[image_index][0]

# Display the original image and true label
plt.subplot(1, 4, 1)
plt.imshow(test_image)
plt.title(f"Original Image\nSize: {test_image.shape}, Label: {true_label}")
plt.axis('off')

# Resize the image to match the model's input shape
resized_image = tf.image.resize(test_image, [32, 32])
resized_image = resized_image.numpy()

# Display the resized image
plt.subplot(1, 4, 2)
plt.imshow(resized_image, interpolation='nearest')
plt.title(f"Resized Image\nSize: {resized_image.shape}")
plt.axis('off')

# Make predictions on the resized image
predictions = model.predict(tf.expand_dims(resized_image, axis=0))
predicted_label = tf.argmax(predictions[0]).numpy()

# Display the predicted label
plt.subplot(1, 4, 3)
plt.title(f"Predicted Label: {predicted_label}")
plt.axis('off')

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.5, 1])
plt.legend(loc='lower right')

test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)

print(test_acc)